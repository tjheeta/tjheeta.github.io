<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Startups on Nothing interesting...</title>
    <link>http://tjheeta.github.io/tags/startups/</link>
    <description>Recent content in Startups on Nothing interesting...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Jan 2016 04:52:00 +0000</lastBuildDate>
    
	<atom:link href="http://tjheeta.github.io/tags/startups/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Picking the right framework</title>
      <link>http://tjheeta.github.io/2016/01/31/picking-the-right-framework/</link>
      <pubDate>Sun, 31 Jan 2016 04:52:00 +0000</pubDate>
      
      <guid>http://tjheeta.github.io/2016/01/31/picking-the-right-framework/</guid>
      <description>It has all been done before For someone starting out building applications for web/mobile/etc, it can be absurdly difficult with all the choice. Should you use Ruby? Python? Haskell? Elixir? C? Rust? Go? Erlang? Node? PHP? Java? How about frameworks? Ruby on rails? Flask? OK, perhaps choosing is too difficult. What about a nosql database? 225 and growing, so not easy. Perhaps it would be easier to figure out a deployment model between containers and paas and configuration management tools?</description>
    </item>
    
    <item>
      <title>The Importance of Documentation</title>
      <link>http://tjheeta.github.io/2015/01/04/the-importance-of-documentation/</link>
      <pubDate>Sun, 04 Jan 2015 04:52:00 +0000</pubDate>
      
      <guid>http://tjheeta.github.io/2015/01/04/the-importance-of-documentation/</guid>
      <description>Have you ever assembled IKEA furniture? They have the best little picture diagrams of how to attach the leg to the table. It makes assembling a piece of furniture with 50+ pieces a snap. On the other hand, if you don&amp;rsquo;t read the documentation and think that you got it under control, you can assemble the damn thing almost perfectly except for the two almost identical looking pieces and then have to take it apart and do it again.</description>
    </item>
    
    <item>
      <title>The naive basics of scaling backend data</title>
      <link>http://tjheeta.github.io/2014/12/27/naive-basics-scaling-a-backend/</link>
      <pubDate>Sat, 27 Dec 2014 04:52:00 +0000</pubDate>
      
      <guid>http://tjheeta.github.io/2014/12/27/naive-basics-scaling-a-backend/</guid>
      <description>I recently had to talk about scaling backend data, so I figured I would write a post about it. There&amp;rsquo;s a well defined pattern to scaling backends which involves moving the bottlenecks from IO to CPU to network and back. I&amp;rsquo;m only going to be talking about well established patterns for scaling backend data because optimizing frontend and throughput is an incredibly nuanced topic.
So let&amp;rsquo;s say you&amp;rsquo;re running out of space.</description>
    </item>
    
  </channel>
</rss>